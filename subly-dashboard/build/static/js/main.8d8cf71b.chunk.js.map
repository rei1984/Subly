{"version":3,"sources":["components/ReadyCard.tsx","components/ErrorCard.tsx","components/TranscribingCard.tsx","components/MediumTiles.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ReadyCard","name","cover","languages","updatedAt","status","createdAt","useState","hovering","setHovering","dropDownValue","setDropDownValue","Card","style","width","height","onMouseEnter","onMouseLeave","Img","variant","src","ImgOverlay","DropdownButton","id","title","className","map","language","Dropdown","Item","as","onClick","e","Button","marginRight","marginLeft","type","color","cursor","position","right","top","Body","Title","Text","ErrorCard","console","log","backgroundColor","TranscribingCard","textAlign","ProgressBar","animated","now","left","MediumTiles","mediums","row","Row","marginTop","medium","Col","App","setMediums","sortBy","setSortBy","useEffect","a","fetchMedium","mediumsFromEndpoint","media","getMediums","fetch","res","json","data","Container","length","newMedia","i","j","push","mediumsArranged","sort","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d8cf71b.chunk.js","sourcesContent":["import Card from 'react-bootstrap/Card';\r\nimport {RiDeleteBin2Line} from 'react-icons/ri';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { useState } from 'react';\r\n\r\ntype ReadyCardProps = {\r\n    name: string;\r\n    cover: string;\r\n    languages: [string]\r\n    status: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n}\r\n\r\n//Component to display the cards with status ready\r\nconst ReadyCard = ({name, cover, languages, status, createdAt, updatedAt}: ReadyCardProps) => {\r\n\r\n    const [hovering, setHovering] = useState(false)\r\n    const [dropDownValue, setDropDownValue] = useState(languages[0]);\r\n\r\n    return (\r\n        <>\r\n            <Card style={{ width: '25rem', height: 'auto' }} onMouseEnter={() => (setHovering(true))} onMouseLeave={() => (setHovering(false))}>\r\n                <Card.Img variant=\"top\" src={cover}/>\r\n                <Card.ImgOverlay >\r\n                    \r\n                    {/* //language selection updates status */}\r\n                    <DropdownButton id=\"dropdown-item-button\" title={dropDownValue} className=\"format\">\r\n                        {languages.map((language) => ( \r\n                        <Dropdown.Item as=\"button\"><div onClick={(e) => (setDropDownValue(language))}>{language}</div></Dropdown.Item>\r\n                        ))}\r\n                    </DropdownButton>\r\n                    \r\n                    {/* //if hovering the options to edit and delete appear */}\r\n                    {hovering ? <>\r\n                    <Button style={{ width: '34%', height: '44px', marginRight: '33%', marginLeft: '33%'}} variant= 'outline-light' type=\"button\">Edit</Button>\r\n                    <RiDeleteBin2Line style={{color: 'white', cursor: 'pointer', position: 'absolute', right: 15, top: 15}}/>\r\n                    </>\r\n                    :   \r\n                    <h3></h3>\r\n                    }\r\n                </Card.ImgOverlay>\r\n                \r\n                    <Card.Body>\r\n                        <Card.Title>{name}</Card.Title>\r\n                        <Card.Text>\r\n                            {updatedAt}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n            </Card>             \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReadyCard\r\n","import Card from 'react-bootstrap/Card';\r\nimport {RiErrorWarningLine} from 'react-icons/ri';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ntype ErrorCardProps = {\r\n    name: string;\r\n    cover: string;\r\n    languages: [string]\r\n    status: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n}\r\n\r\n//component to display errored cards\r\nconst ErrorCard = ({name, cover, languages, status, createdAt, updatedAt}: ErrorCardProps) => {\r\n    console.log(\"Found an error card\")\r\n    return (\r\n        <>\r\n            <Card style={{ width: '25rem', height: 'auto' }}>\r\n                <Card.Body style={{ width: '100%', height: '200px', backgroundColor: 'pink' }}>\r\n                    <RiErrorWarningLine style={{color: 'red', cursor: 'pointer'}}/>\r\n                    <Card.Text>\r\n                        An error occurred while processing your file. Delete file to try again, and report issue if problem persists.\r\n                    </Card.Text>\r\n                    {/* buttons to delete or report that would be connected to some other scripts */}\r\n                    <Button style={{ width: '33%', height: '44px', marginRight: '20px', marginLeft: '23%'}} variant= 'light' type=\"button\">Delete File</Button>\r\n                    <Button style={{ width: '33%', height: '44px'}} variant= 'primary' type=\"button\">Send Report</Button>\r\n                </Card.Body>\r\n\r\n                <Card.Body>\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Text>\r\n                        Error in Processing\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>             \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ErrorCard\r\n","import Card from 'react-bootstrap/Card';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\ntype TranscribingCardProp = {\r\n    name: string;\r\n    cover: string;\r\n    languages: [string]\r\n    status: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n}\r\n\r\n//component for card being transcribed\r\nconst TranscribingCard = ({name, cover, languages, status, createdAt, updatedAt}: TranscribingCardProp) => {\r\n    console.log(\"Found a transcribing card\")\r\n    return (\r\n        //darken background: can only seem to darken this background cannot workout how to dynamically darken backgrounds on hover in the other cards\r\n        <div className= 'transcribingImg'>\r\n            <Card style={{ width: '25rem', height: 'auto' }}>\r\n                <Card.Img variant=\"top\" src={cover}/>\r\n                <Card.ImgOverlay>\r\n                    {/* inform is being transcribed */}\r\n                    <h3 style={{ color: 'white', textAlign: 'center'}} >Transcribing Subtitles</h3>\r\n                    <ProgressBar animated now={100} style={{position: 'absolute', top: 100, right: 25, left: 25}}/>\r\n                </Card.ImgOverlay>\r\n                <Card.Body>\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Text>\r\n                        Transcribing\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>             \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TranscribingCard\r\n","import ReadyCard from './ReadyCard';\r\nimport ErrorCard from './ErrorCard';\r\nimport TranscribingCard from './TranscribingCard';\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport {Medium} from '../Medium'\r\n\r\ntype MediumTilesProp = {\r\n    mediums: [Medium[]]\r\n}\r\n\r\n//Component to display the list of tiles\r\nconst MediumTiles = ({mediums} : MediumTilesProp) => {\r\n    return (\r\n        <>\r\n            {mediums.map((row) => (\r\n                <Row style={{marginTop: '2rem'}}>\r\n                    {row.map((medium) => (\r\n                        <Col>\r\n                        <div className=\"item\"> \r\n                        {\r\n                            {\r\n                            'ready': <ReadyCard key={medium.id} name={medium.name} cover={medium.cover} languages={medium.languages} status={medium.status} createdAt={medium.createdAt} updatedAt={medium.updatedAt}/>,\r\n                            'error': <ErrorCard key={medium.id} name={medium.name} cover={medium.cover} languages={medium.languages} status={medium.status} createdAt={medium.createdAt} updatedAt={medium.updatedAt}/>,\r\n                            'transcribing' : <TranscribingCard key={medium.id} name={medium.name} cover={medium.cover} languages={medium.languages} status={medium.status} createdAt={medium.createdAt} updatedAt={medium.updatedAt}/>\r\n                            }[medium.status]\r\n                        }              \r\n                        </div>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MediumTiles\r\n","import { Container} from 'react-bootstrap';\nimport {useState, useEffect} from 'react';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MediumTiles from './components/MediumTiles'\nimport {Medium} from './Medium'\n\n\nfunction App() {\n\n  const [mediums, setMediums] = useState<Medium[]>([])\n  const [sortBy, setSortBy] = useState<string>('Sorting by: Name')\n\n  //on load of app fetch the mediums from the endpoint\n  useEffect(() => {\n    const getMediums = async () => {\n      const mediumsFromEndpoint = await fetchMedium();\n      setMediums(mediumsFromEndpoint.media);\n    }\n\n    getMediums();\n  }, [])\n\n  //fetch data from the endpoint\n  const fetchMedium = async () => {\n    const res = await fetch('https://run.mocky.io/v3/a811c0e9-adae-4554-9694-173aa23bc38b');\n    const data = await res.json();\n    return(data);\n  }\n\n  //sort by the sortby state\n  const sort = (mediums: Medium[]) => {\n    switch(sortBy) {\n      case 'Sorting by: Languages': return mediums.sort((a, b) => (a.languages.length < b.languages.length) ? 1 : -1);\n      case 'Sorting by: Status': return mediums.sort((a, b) => (a.status > b.status) ? 1 : -1);\n      default: return mediums.sort((a: Medium, b: Medium) => (a.name > b.name) ? 1 : -1);\n    }\n  }\n\n  //arrange media into rows of 3\n  const mediumsArranged = (mediums: Medium[]) => {\n    let newMedia: [Medium[]] = [[]];\n    let i = 0;\n    let j = 0;\n    for (const medium of mediums) {\n      if (i < 3) {\n        newMedia[j].push(medium);\n        i++;\n      } else {\n        j++;\n        newMedia.push([]);\n        newMedia[j].push(medium); \n        i = 1;\n      }\n    }\n    return newMedia;\n  }\n\n  return (\n    <div>\n      <Container>\n        {/* Sorting by Name, LangaugeNo, and Status */}\n        <DropdownButton id=\"dropdown-item-button\" title={sortBy} className=\"format\" style={{marginLeft: '80%', marginRight: '10%'}}>\n            <Dropdown.Item as=\"button\"><div onClick={(e) => (setSortBy(\"Sorting by: Name\"))}>Name</div></Dropdown.Item>\n            <Dropdown.Item as=\"button\"><div onClick={(e) => (setSortBy(\"Sorting by: Languages\"))}>Languages</div></Dropdown.Item>\n            <Dropdown.Item as=\"button\"><div onClick={(e) => (setSortBy(\"Sorting by: Status\"))}>Status</div></Dropdown.Item>\n        </DropdownButton>        \n          {mediums.length > 0 ? <MediumTiles mediums={mediumsArranged(sort(mediums))} /> : <p>No Items to Show</p>}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}